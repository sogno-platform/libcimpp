#ifndef GovSteamEU_H
#define GovSteamEU_H
/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/

#include <list>
#include <map>
#include <string>
#include <unordered_map>

#include "TurbineGovernorDynamics.hpp"
#include "BaseClassDefiner.hpp"
#include "CGMESProfile.hpp"
#include "CimClassDetails.hpp"
#include "ActivePower.hpp"
#include "PU.hpp"
#include "Seconds.hpp"
#include "Simple_Float.hpp"

namespace CIMPP
{

	/** \brief Simplified model  of boiler and steam turbine with PID governor. */
	class GovSteamEU : public TurbineGovernorDynamics
	{
	public:
		/* constructor initialising all attributes to null */
		GovSteamEU();
		~GovSteamEU() override;

		/** \brief Control valves rate closing limit (Chc).  Unit = PU/sec.  Typical Value = -3.3. Default: nullptr */
		CIMPP::Simple_Float chc;

		/** \brief Control valves rate opening limit (Cho).  Unit = PU/sec.  Typical Value = 0.17. Default: nullptr */
		CIMPP::Simple_Float cho;

		/** \brief Intercept valves rate closing limit (Cic).  Typical Value = -2.2. Default: nullptr */
		CIMPP::PU cic;

		/** \brief Intercept valves rate opening limit (Cio).  Typical Value = 0.123. Default: nullptr */
		CIMPP::PU cio;

		/** \brief Dead band of the frequency corrector (db1).  Typical Value = 0. Default: nullptr */
		CIMPP::PU db1;

		/** \brief Dead band of the speed governor (db2).  Typical Value = 0.0004. Default: nullptr */
		CIMPP::PU db2;

		/** \brief Maximum control valve position (Hhpmax).  Typical Value = 1. Default: nullptr */
		CIMPP::PU hhpmax;

		/** \brief Gain of the power controller (Ke).  Typical Value = 0.65. Default: nullptr */
		CIMPP::PU ke;

		/** \brief Gain of the frequency corrector (Kfcor).  Typical Value = 20. Default: nullptr */
		CIMPP::PU kfcor;

		/** \brief Fraction of total turbine output generated by HP part (Khp).  Typical Value = 0.277. Default: nullptr */
		CIMPP::PU khp;

		/** \brief Fraction of total turbine output generated by HP part (Klp).  Typical Value = 0.723. Default: nullptr */
		CIMPP::PU klp;

		/** \brief Gain of the speed governor (Kwcor).  Typical Value = 20. Default: nullptr */
		CIMPP::PU kwcor;

		/** \brief Base for power values (MWbase) (&gt;0).  Unit = MW. Default: nullptr */
		CIMPP::ActivePower mwbase;

		/** \brief Maximal active power of the turbine (Pmax).  Typical Value = 1. Default: nullptr */
		CIMPP::PU pmax;

		/** \brief Maximum low pressure limit (Prhmax).  Typical Value = 1.4. Default: nullptr */
		CIMPP::PU prhmax;

		/** \brief Intercept valves transfer limit (Simx).  Typical Value = 0.425. Default: nullptr */
		CIMPP::PU simx;

		/** \brief Boiler time constant (Tb).  Typical Value = 100. Default: nullptr */
		CIMPP::Seconds tb;

		/** \brief Derivative time constant of the power controller (Tdp).  Typical Value = 0. Default: nullptr */
		CIMPP::Seconds tdp;

		/** \brief Electro hydraulic transducer (Ten).  Typical Value = 0.1. Default: nullptr */
		CIMPP::Seconds ten;

		/** \brief Frequency transducer time constant (Tf).  Typical Value = 0. Default: nullptr */
		CIMPP::Seconds tf;

		/** \brief Time constant of the power controller (Tfp).  Typical Value = 0. Default: nullptr */
		CIMPP::Seconds tfp;

		/** \brief High pressure (HP) time constant of the turbine (Thp).  Typical Value = 0.31. Default: nullptr */
		CIMPP::Seconds thp;

		/** \brief Integral time constant of the power controller (Tip).  Typical Value = 2. Default: nullptr */
		CIMPP::Seconds tip;

		/** \brief Low pressure(LP) time constant of the turbine (Tlp).  Typical Value = 0.45. Default: nullptr */
		CIMPP::Seconds tlp;

		/** \brief Power transducer time constant (Tp).  Typical Value = 0.07. Default: nullptr */
		CIMPP::Seconds tp;

		/** \brief Reheater  time constant of the turbine (Trh).  Typical Value = 8. Default: nullptr */
		CIMPP::Seconds trh;

		/** \brief Control valves servo time constant (Tvhp).  Typical Value = 0.1. Default: nullptr */
		CIMPP::Seconds tvhp;

		/** \brief Intercept valves servo time constant (Tvip).  Typical Value = 0.15. Default: nullptr */
		CIMPP::Seconds tvip;

		/** \brief Speed transducer time constant (Tw).  Typical Value = 0.02. Default: nullptr */
		CIMPP::Seconds tw;

		/** \brief Upper limit for frequency correction (Wfmax).  Typical Value = 0.05. Default: nullptr */
		CIMPP::PU wfmax;

		/** \brief Lower limit for frequency correction (Wfmin).  Typical Value = -0.05. Default: nullptr */
		CIMPP::PU wfmin;

		/** \brief Emergency speed control lower limit (wmax1).  Typical Value = 1.025. Default: nullptr */
		CIMPP::PU wmax1;

		/** \brief Emergency speed control upper limit (wmax2).  Typical Value = 1.05. Default: nullptr */
		CIMPP::PU wmax2;

		/** \brief Upper limit for the speed governor (Wwmax).  Typical Value = 0.1. Default: nullptr */
		CIMPP::PU wwmax;

		/** \brief Lower limit for the speed governor frequency correction (Wwmin).  Typical Value = -1. Default: nullptr */
		CIMPP::PU wwmin;

		static const char debugName[];
		const char* debugString() const override;

		const std::list<std::string>& getAttributeNames() const override;

		const std::string& getClassNamespaceUrl() const override;
		const std::string& getAttributeNamespaceUrl(const std::string& attrName) const override;

		const std::list<CGMESProfile>& getPossibleProfiles() const override;
		const CGMESProfile& getRecommendedProfile() const override;
		const std::list<CGMESProfile>& getPossibleAttributeProfiles(const std::string& attrName) const override;
		const std::list<CGMESProfile>& getPossibleProfilesIncludingAttributes() const override;

		static void addConstructToMap(std::unordered_map<std::string, BaseClass* (*)()>& factory_map);
		static void addPrimitiveAssignFnsToMap(std::unordered_map<std::string, assign_function>& assign_map);
		static void addClassAssignFnsToMap(std::unordered_map<std::string, class_assign_function>& assign_map);
		void addPrimitiveGetFnsToMap(std::map<std::string, get_function>& get_map) const override;
		void addClassGetFnsToMap(std::map<std::string, class_get_function>& get_map) const override;
		void addEnumGetFnsToMap(std::map<std::string, get_function>& get_map) const override;

		bool isAssignableFrom(BaseClass* otherObject) const override;
		static const BaseClassDefiner declare();

	protected:
		std::map<std::string, AttrDetails> allAttrDetailsMap() const override;
	};

	BaseClass* GovSteamEU_factory();
}
#endif
