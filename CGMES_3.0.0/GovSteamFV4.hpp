#ifndef GovSteamFV4_H
#define GovSteamFV4_H
/*
Generated from the CGMES files via cimgen: https://github.com/sogno-platform/cimgen
*/

#include <list>
#include <map>
#include <string>
#include <unordered_map>

#include "TurbineGovernorDynamics.hpp"
#include "BaseClassDefiner.hpp"
#include "CGMESProfile.hpp"
#include "CimClassDetails.hpp"
#include "Float.hpp"
#include "PU.hpp"
#include "Seconds.hpp"

namespace CIMPP
{

	/** \brief Detailed electro-hydraulic governor for steam unit. */
	class GovSteamFV4 : public TurbineGovernorDynamics
	{
	public:
		/* constructor initialising all attributes to null */
		GovSteamFV4();
		~GovSteamFV4() override;

		/** \brief Minimum value of pressure regulator output (&lt;i&gt;Cpsmn&lt;/i&gt;).  Typical value = -1. Default: nullptr */
		CIMPP::PU cpsmn;

		/** \brief Maximum value of pressure regulator output (&lt;i&gt;Cpsmx&lt;/i&gt;).  Typical value = 1. Default: nullptr */
		CIMPP::PU cpsmx;

		/** \brief Minimum value of regulator set-point (&lt;i&gt;Crmn&lt;/i&gt;).  Typical value = 0. Default: nullptr */
		CIMPP::PU crmn;

		/** \brief Maximum value of regulator set-point (&lt;i&gt;Crmx&lt;/i&gt;).  Typical value = 1,2. Default: nullptr */
		CIMPP::PU crmx;

		/** \brief Derivative gain of pressure regulator (&lt;i&gt;Kdc&lt;/i&gt;).  Typical value = 1. Default: nullptr */
		CIMPP::PU kdc;

		/** \brief Frequency bias (reciprocal of droop) (&lt;i&gt;Kf1&lt;/i&gt;).  Typical value = 20. Default: nullptr */
		CIMPP::PU kf1;

		/** \brief Frequency control (reciprocal of droop) (&lt;i&gt;Kf3&lt;/i&gt;).  Typical value = 20. Default: nullptr */
		CIMPP::PU kf3;

		/** \brief Fraction  of total turbine output generated by HP part (&lt;i&gt;Khp&lt;/i&gt;).  Typical value = 0,35. Default: nullptr */
		CIMPP::PU khp;

		/** \brief Integral gain of pressure regulator (&lt;i&gt;Kic&lt;/i&gt;).  Typical value = 0,0033. Default: nullptr */
		CIMPP::PU kic;

		/** \brief Integral gain of pressure feedback regulator (&lt;i&gt;Kip&lt;/i&gt;).  Typical value = 0,5. Default: nullptr */
		CIMPP::PU kip;

		/** \brief Integral gain of electro-hydraulic regulator (&lt;i&gt;Kit&lt;/i&gt;).  Typical value = 0,04. Default: nullptr */
		CIMPP::PU kit;

		/** \brief First gain coefficient of  intercept valves characteristic (&lt;i&gt;Kmp1&lt;/i&gt;).  Typical value = 0,5. Default: nullptr */
		CIMPP::PU kmp1;

		/** \brief Second gain coefficient of intercept valves characteristic (&lt;i&gt;Kmp2&lt;/i&gt;).  Typical value = 3,5. Default: nullptr */
		CIMPP::PU kmp2;

		/** \brief Proportional gain of pressure regulator (&lt;i&gt;Kpc&lt;/i&gt;).  Typical value = 0,5. Default: nullptr */
		CIMPP::PU kpc;

		/** \brief Proportional gain of pressure feedback regulator (&lt;i&gt;Kpp&lt;/i&gt;).  Typical value = 1. Default: nullptr */
		CIMPP::PU kpp;

		/** \brief Proportional gain of electro-hydraulic regulator (&lt;i&gt;Kpt&lt;/i&gt;).  Typical value = 0,3. Default: nullptr */
		CIMPP::PU kpt;

		/** \brief Maximum variation of fuel flow (&lt;i&gt;Krc&lt;/i&gt;).  Typical value = 0,05. Default: nullptr */
		CIMPP::PU krc;

		/** \brief Pressure loss due to flow friction in the boiler tubes (&lt;i&gt;Ksh&lt;/i&gt;).  Typical value = 0,08. Default: nullptr */
		CIMPP::PU ksh;

		/** \brief Maximum negative power error (&lt;i&gt;Lpi&lt;/i&gt;).  Typical value = -0,15. Default: nullptr */
		CIMPP::PU lpi;

		/** \brief Maximum positive power error (&lt;i&gt;Lps&lt;/i&gt;).  Typical value = 0,03. Default: nullptr */
		CIMPP::PU lps;

		/** \brief Lower limit for frequency correction (&lt;i&gt;MN&lt;/i&gt;&lt;i&gt;&lt;sub&gt;EF&lt;/sub&gt;&lt;/i&gt;).  Typical value = -0,05. Default: nullptr */
		CIMPP::PU mnef;

		/** \brief Upper limit for frequency correction (&lt;i&gt;MX&lt;/i&gt;&lt;i&gt;&lt;sub&gt;EF&lt;/sub&gt;&lt;/i&gt;).  Typical value = 0,05. Default: nullptr */
		CIMPP::PU mxef;

		/** \brief First value of pressure set point static characteristic (&lt;i&gt;Pr1&lt;/i&gt;).  Typical value = 0,2. Default: nullptr */
		CIMPP::PU pr1;

		/** \brief Second value of pressure set point static characteristic, corresponding to &lt;i&gt;Ps0&lt;/i&gt; = 1,0 PU (&lt;i&gt;Pr2&lt;/i&gt;).  Typical value = 0,75. Default: nullptr */
		CIMPP::PU pr2;

		/** \brief Minimum value of pressure set point static characteristic (&lt;i&gt;Psmn&lt;/i&gt;).  Typical value = 1. Default: nullptr */
		CIMPP::PU psmn;

		/** \brief Minimum value of integral regulator (&lt;i&gt;Rsmimn&lt;/i&gt;).  Typical value = 0. Default: nullptr */
		CIMPP::PU rsmimn;

		/** \brief Maximum value of integral regulator (&lt;i&gt;Rsmimx&lt;/i&gt;).  Typical value = 1,1. Default: nullptr */
		CIMPP::PU rsmimx;

		/** \brief Minimum value of integral regulator (&lt;i&gt;Rvgmn&lt;/i&gt;).  Typical value = 0. Default: nullptr */
		CIMPP::PU rvgmn;

		/** \brief Maximum value of integral regulator (&lt;i&gt;Rvgmx&lt;/i&gt;).  Typical value = 1,2. Default: nullptr */
		CIMPP::PU rvgmx;

		/** \brief Minimum valve opening (&lt;i&gt;Srmn&lt;/i&gt;).  Typical value = 0. Default: nullptr */
		CIMPP::PU srmn;

		/** \brief Maximum valve opening (&lt;i&gt;Srmx&lt;/i&gt;).  Typical value = 1,1. Default: nullptr */
		CIMPP::PU srmx;

		/** \brief Intercept valves characteristic discontinuity point (&lt;i&gt;Srsmp&lt;/i&gt;).  Typical value = 0,43. Default: nullptr */
		CIMPP::PU srsmp;

		/** \brief Maximum regulator gate closing velocity (&lt;i&gt;Svmn&lt;/i&gt;).  Typical value = -0,0333. Default: 0.0 */
		CIMPP::Float svmn;

		/** \brief Maximum regulator gate opening velocity (&lt;i&gt;Svmx&lt;/i&gt;).  Typical value = 0,0333. Default: 0.0 */
		CIMPP::Float svmx;

		/** \brief Control valves rate opening time (&lt;i&gt;Ta&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 0,8. Default: nullptr */
		CIMPP::Seconds ta;

		/** \brief Intercept valves rate opening time (&lt;i&gt;Tam&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 0,8. Default: nullptr */
		CIMPP::Seconds tam;

		/** \brief Control valves rate closing time (&lt;i&gt;Tc&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 0,5. Default: nullptr */
		CIMPP::Seconds tc;

		/** \brief Intercept valves rate closing time (&lt;i&gt;Tcm&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 0,5. Default: nullptr */
		CIMPP::Seconds tcm;

		/** \brief Derivative time constant of pressure regulator (&lt;i&gt;Tdc&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 90. Default: nullptr */
		CIMPP::Seconds tdc;

		/** \brief Time constant of fuel regulation (&lt;i&gt;Tf1&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 10. Default: nullptr */
		CIMPP::Seconds tf1;

		/** \brief Time constant of steam chest (&lt;i&gt;Tf2&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 10. Default: nullptr */
		CIMPP::Seconds tf2;

		/** \brief High pressure (HP) time constant of the turbine (&lt;i&gt;Thp&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 0,15. Default: nullptr */
		CIMPP::Seconds thp;

		/** \brief Low pressure (LP) time constant of the turbine (&lt;i&gt;Tmp&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 0,4. Default: nullptr */
		CIMPP::Seconds tmp;

		/** \brief Reheater  time constant of the turbine (&lt;i&gt;Trh&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 10. Default: nullptr */
		CIMPP::Seconds trh;

		/** \brief Boiler time constant (&lt;i&gt;Tv&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 60. Default: nullptr */
		CIMPP::Seconds tv;

		/** \brief Control valves servo time constant (&lt;i&gt;Ty&lt;/i&gt;) (&amp;gt;= 0).  Typical value = 0,1. Default: nullptr */
		CIMPP::Seconds ty;

		/** \brief Coefficient of linearized equations of turbine (Stodola formulation) (&lt;i&gt;Y&lt;/i&gt;).  Typical value = 0,13. Default: nullptr */
		CIMPP::PU y;

		/** \brief Minimum control valve position (&lt;i&gt;Yhpmn&lt;/i&gt;).  Typical value = 0. Default: nullptr */
		CIMPP::PU yhpmn;

		/** \brief Maximum control valve position (&lt;i&gt;Yhpmx&lt;/i&gt;).  Typical value = 1,1. Default: nullptr */
		CIMPP::PU yhpmx;

		/** \brief Minimum intercept valve position (&lt;i&gt;Ympmn&lt;/i&gt;).  Typical value = 0. Default: nullptr */
		CIMPP::PU ympmn;

		/** \brief Maximum intercept valve position (&lt;i&gt;Ympmx&lt;/i&gt;).  Typical value = 1,1. Default: nullptr */
		CIMPP::PU ympmx;

		static const char debugName[];
		const char* debugString() const override;

		const std::list<std::string>& getAttributeNames() const override;

		const std::string& getClassNamespaceUrl() const override;
		const std::string& getAttributeNamespaceUrl(const std::string& attrName) const override;

		const std::list<CGMESProfile>& getPossibleProfiles() const override;
		const CGMESProfile& getRecommendedProfile() const override;
		const std::list<CGMESProfile>& getPossibleAttributeProfiles(const std::string& attrName) const override;
		const std::list<CGMESProfile>& getPossibleProfilesIncludingAttributes() const override;

		static void addConstructToMap(std::unordered_map<std::string, BaseClass* (*)()>& factory_map);
		static void addPrimitiveAssignFnsToMap(std::unordered_map<std::string, assign_function>& assign_map);
		static void addClassAssignFnsToMap(std::unordered_map<std::string, class_assign_function>& assign_map);
		void addPrimitiveGetFnsToMap(std::map<std::string, get_function>& get_map) const override;
		void addClassGetFnsToMap(std::map<std::string, class_get_function>& get_map) const override;
		void addEnumGetFnsToMap(std::map<std::string, get_function>& get_map) const override;

		bool isAssignableFrom(BaseClass* otherObject) const override;
		static const BaseClassDefiner declare();

	protected:
		std::map<std::string, AttrDetails> allAttrDetailsMap() const override;
	};

	BaseClass* GovSteamFV4_factory();
}
#endif
